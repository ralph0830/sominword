---
description: 
globs: 
alwaysApply: true
---
# Flutter 프로젝트 규칙

## Deprecated Member Use 오류 처리 규칙

### 1. deprecated_member_use 오류 정의
- `deprecated_member_use` 오류는 더 이상 사용되지 않는(deprecated) 라이브러리나 클래스 멤버를 사용할 때 발생합니다.
- `@deprecated` 어노테이션이 붙은 메서드, 클래스, 라이브러리를 사용하면 발생합니다.

### 2. 오류 발생 예시
```dart
// 만약 클래스 C의 메서드 m이 @deprecated로 표시되어 있다면
void f(C c) {
  c.m(); // 이 코드에서 deprecated_member_use 오류 발생
}
```

### 3. 해결 방법
1. **문서 확인**: deprecated된 코드의 문서를 확인하여 대체 방법을 찾습니다.
2. **최신 API 사용**: 새로운 API나 메서드로 교체합니다.
3. **라이브러리 업데이트**: 최신 버전의 라이브러리를 사용합니다.

### 4. 프로젝트에서 deprecated 오류 찾기 및 수정
- 모든 Dart/Flutter 파일에서 deprecated된 멤버 사용을 찾아 수정합니다.
- 정적 분석 도구를 사용하여 deprecated 사용을 감지합니다.
- 코드 리뷰 시 deprecated 사용을 확인합니다.

### 5. 코드 품질 유지
- deprecated된 코드 사용을 피하고 최신 API를 사용합니다.
- 정기적으로 코드베이스를 검사하여 deprecated 사용을 제거합니다.
- 팀원들과 deprecated 사용에 대한 가이드라인을 공유합니다.

## Flutter 개발 규칙

### 1. 코드 스타일
- Dart 공식 스타일 가이드를 따릅니다.
- 일관된 들여쓰기와 네이밍 컨벤션을 사용합니다.

### 2. 성능 최적화
- 불필요한 위젯 리빌드를 방지합니다.
- 메모리 누수를 방지하기 위해 적절한 dispose를 구현합니다.

### 3. 테스트
- 단위 테스트와 위젯 테스트를 작성합니다.
- 중요한 비즈니스 로직에 대한 테스트 커버리지를 유지합니다.

### 4. 보안
- 민감한 정보를 코드에 하드코딩하지 않습니다.
- 적절한 인증 및 권한 검사를 구현합니다.
